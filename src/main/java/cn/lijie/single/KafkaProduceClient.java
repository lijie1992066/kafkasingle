package cn.lijie.single;import java.util.Properties;import org.apache.kafka.clients.producer.Callback;import org.apache.kafka.clients.producer.KafkaProducer;import org.apache.kafka.clients.producer.ProducerRecord;import org.apache.kafka.clients.producer.RecordMetadata;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class KafkaProduceClient {    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaProduceClient.class);    private static KafkaProducer<String, String> kafkaProducer = null;    private static KafkaProduceClient client = new KafkaProduceClient();    private static int retry;    private KafkaProduceClient() {        super();    }    public static KafkaProduceClient getInstance() {        init();        return client;    }    private static void init() {        if (null == kafkaProducer) {            synchronized (KafkaProduceClient.class) {                if (null == kafkaProducer) {                    Properties properties = new Properties();                    properties.put("bootstrap.servers", "118.89.59.251:9092,118.89.60.46:9092,118.89.62.210:9092");//					properties.put("bootstrap.servers", "119.29.54.46:9092,119.29.4.166:9092,119.29.11.81:9092");                    // 序列化类型                    properties.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");                    properties.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");                    properties.put("acks", "all");                    properties.put("retries", "10");                    properties.put("linger.ms", "5");//					properties.put("reconnect.backoff.ms", "20000");//					properties.put("retry.backoff.ms", "20000");                    retry = 3;                    kafkaProducer = new KafkaProducer<>(properties);                }            }        }    }    public void sendKafkaMessage(final String topic, final String message) {        ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, message);        kafkaProducer.send(record, new Callback() {            public void onCompletion(RecordMetadata recordMetadata, Exception exception) {                if (null != exception) {                    LOGGER.error("写入kafka失败 message:{}", exception.getMessage());                    retryKakfaMessage(topic, message);                }            }        });    }    private void retryKakfaMessage(String topic, String retryMessage) {        ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, retryMessage);        for (int i = 1; i <= retry; i++) {            try {                kafkaProducer.send(record);                return;            } catch (Exception e) {                retryKakfaMessage(topic, retryMessage);            }        }    }    public static void close() {        if (null != kafkaProducer) {            kafkaProducer.close();        }    }}